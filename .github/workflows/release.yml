# Telegram Bot Template - Release & Deployment Pipeline
# Version: 1.0
# Updated: 2025-10-03

name: 🚀 Release & Deployment

on:
  push:
    tags:
      - 'v*'
      - 'release-v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - pre

jobs:
  # Job 1: Pre-release validation
  pre-release:
    name: 🔍 Pre-Release Validation
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.content }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🧪 Run full test suite
      run: npm test -- --coverage
    
    - name: 📏 Code quality check
      run: |
        if npm run | grep -q "lint"; then
          npm run lint
        fi
    
    - name: 🔍 Security audit
      run: npm audit --audit-level moderate
    
    - name: 📝 Generate version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ inputs.version_type }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        fi
    
    - name: 📋 Generate changelog
      id: changelog
      run: |
        echo "content=$(cat CHANGELOG.md | head -50)" >> $GITHUB_OUTPUT

  # Job 2: Build release artifacts
  build:
    name: 🏗️ Build Release Artifacts
    runs-on: ubuntu-latest
    needs: pre-release
    
    outputs:
      docker-image: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🏷️ Extract Docker metadata
      id: meta
      uses: docker/setup-buildx-action/v3@v3
      with:
        driver-opts: |
          network=host
          env.BUILDKIT_STEP_LOG_MAX_SIZE=104857600
    
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: 📦 Build archive
      run: |
        mkdir -p releases
        zip -r releases/telegram-bot-${{ needs.pre-release.outputs.version }}.zip \
          src config docs package.json package-lock.json \
          Dockerfile docker-compose.yml README.md \
          CHANGELOG.md CONTRIBUTING.md LICENSE \
          SECURITY.md CODE_OF_CONDUCT.md \
          -x "*.log" "*.tmp" "tests/" ".github/"

  # Job 3: Create GitHub Release
  github-release:
    name: 📢 GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release, build]
    if: github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 📋 Generate release notes
      run: |
        echo "# Telegram Bot Template v${{ needs.pre-release.outputs.version }}" > release_notes.md
        echo "" >> release_notes.md
        echo "## 🚀 ما الجديد" >> release_notes.md
        echo "" >> release_notes.md
        
        # Extract features from CHANGELOG.md
        sed -n '/## \[${{ needs.pre-release.outputs.version }}\]/{:a;n;/## \[.*\]/Q;p;ba}' CHANGELOG.md >> release_notes.md
        
        echo "" >> release_notes.md
        echo "## 📦 التحميل والاستخدام" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🐳 Docker:" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository }}/telegram-bot:${{ needs.pre-release.outputs.version }}" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 📁 Archive:" >> release_notes.md
        echo "تحميل الملف المُؤرشف للاستخدام المباشر" >> release_notes.md
    
    - name: 🚀 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.pre-release.outputs.version }}
        release_name: 🚀 Telegram Bot Template v${{ needs.pre-release.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'pre') }}

  # Job 4: Publish to NPM (if applicable)
  npm-publish:
    name: 📦 NPM Publish
    runs-on: ubuntu-latest
    needs: [pre-release, build]
    if: github.event_name == 'push' && contains(github.ref, 'v') && !contains(github.ref, 'pre')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🧪 Run tests before publish
      run: npm test
    
    - name: 📝 Update package version
      run: |
        npm version ${{ needs.pre-release.outputs.version }} --no-git-tag-version
        git add package.json
        git commit -m "chore: bump version to ${{ needs.pre-release.outputs.version }}" || echo "No changes to commit"
    
    - name: 📦 Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job 5: Docker Registry Push
  docker-push:
    name: 🐳 Push to Docker Registry
    runs-on: ubuntu-latest
    needs: [build, github-release]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏷️ Extract Docker metadata
      id: meta
      uses: docker/setup-buildx-action/v3@v3
    
    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/telegram-bot:latest
          ghcr.io/${{ github.repository }}/telegram-bot:${{ needs.pre-release.outputs.version }}
          ghcr.io/${{ github.repository }}/telegram-bot:${{ needs.pre-release.outputs.version }}-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 6: Notification
  notify:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [github-release, npm-publish, docker-push]
    if: always()
    
    steps:
    - name: 📢 Release notification
      run: |
        echo "🚀 Telegram Bot Template has been released!"
        echo "📦 Version: ${{ needs.pre-release.outputs.version }}"
        echo "🏷️ Tag: v${{ needs.pre-release.outputs.version }}"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.pre-release.outputs.version }}"
        echo "🐳 Docker: ghcr.io/${{ github.repository }}/telegram-bot:${{ needs.pre-release.outputs.version }}"
